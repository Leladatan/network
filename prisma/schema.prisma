generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model User {
  id       String  @id @default(uuid())
  username String  @unique
  status   String  @default("")
  online   Boolean @default(false)
  email    String  @unique
  avatar   String  @default("https://utfs.io/f/9c52e5e6-ccc9-42ee-9a67-af8a3329a746-uao75v.jpg")
  banner   String? @db.Text
  password String

  posts       Post[]       @relation("Posts")
  other_posts Post[]       @relation("OtherPosts")
  liked       Liked_Post[] @relation("LikedPost")

  comments Comment[] @relation("CommentUser")

  subscribers      Subscriber[] @relation("UserSubscriber")
  subscriber_users Subscriber[] @relation("SubscriberInUser")

  notifications         Notification[] @relation("UserNotification")
  notifications_subject Notification[] @relation("UserSubjectNotification")

  fried_object Friend[] @relation("UserWithFriend")
  friends      Friend[] @relation("FriendWithUser")

  photos Photo[] @relation("UserOwnerPhoto")
  albums Album[] @relation("UserOwnerAlbum")

  musics_list MusicList? @relation("UserAddMusic")

  createdAt DateTime    @default(now())
  updateAt  DateTime    @updatedAt

  @@index([id])
}

model Post {
  id    String @id @default(uuid())
  title String

  photo String?

  userId String
  user   User   @relation("Posts", fields: [userId], references: [id])

  authorId String
  author   User   @relation("OtherPosts", fields: [authorId], references: [id])

  likes Int          @default(0)
  liked Liked_Post[] @relation("LikedUser")

  isEdited Boolean @default(false)

  comments Comment[] @relation("CommentsPost")

  createdAt DateTime @default(now())
  updateAt  DateTime @updatedAt

  @@index([userId])
  @@index([authorId])
}

model Liked_Post {
  id String @id @default(uuid())

  userId String
  user   User   @relation("LikedPost", fields: [userId], references: [id])

  postId String
  post   Post   @relation("LikedUser", onDelete: Cascade, fields: [postId], references: [id])

  createdAt DateTime @default(now())
  updateAt  DateTime @updatedAt

  @@index([userId])
  @@index([postId])
}

model Comment {
  id String @id @default(uuid())

  title String

  authorId String
  author   User   @relation("CommentUser", fields: [authorId], references: [id])

  postId String
  post   Post   @relation("CommentsPost", onDelete: Cascade, fields: [postId], references: [id])

  isEdited Boolean @default(false)

  createdAt DateTime @default(now())
  updateAt  DateTime @updatedAt

  @@index([authorId])
  @@index([postId])
}

model Subscriber {
  id String @id @default(uuid())

  userId String
  user   User   @relation("UserSubscriber", fields: [userId], references: [id])

  subscriberId String
  subscriber   User   @relation("SubscriberInUser", fields: [subscriberId], references: [id])

  createdAt DateTime @default(now())
  updateAt  DateTime @updatedAt

  @@index([userId])
  @@index([subscriberId])
}

enum TypeNotification {
  friend_add
  like_add
  comment_add
}

model Notification {
  id String @id @default(uuid())

  userId String
  user   User   @relation("UserNotification", fields: [userId], references: [id])

  subject_userId String
  subject_user   User   @relation("UserSubjectNotification", fields: [subject_userId], references: [id])

  type TypeNotification

  checked Boolean @default(false)

  createdAt DateTime @default(now())
  updateAt  DateTime @updatedAt

  @@index([userId])
  @@index([subject_userId])
}

model Friend {
  id String @id @default(uuid())

  userId String
  user   User   @relation("UserWithFriend", fields: [userId], references: [id])

  friendId String
  friend   User   @relation("FriendWithUser", fields: [friendId], references: [id])

  createdAt DateTime @default(now())
  updateAt  DateTime @updatedAt

  @@index([userId])
  @@index([friendId])
}

enum TypePhoto {
  avatar
  banner
  post
}

model Photo {
  id String @id @default(uuid())

  userId String
  user   User   @relation("UserOwnerPhoto", fields: [userId], references: [id])

  photo String

  albumId String?
  album   Album?  @relation("PhotosInAlbum", fields: [albumId], references: [id])

  type TypePhoto?

  createdAt DateTime @default(now())
  updateAt  DateTime @updatedAt

  @@index([userId])
  @@index([albumId])
}

model Album {
  id String @id @default(uuid())

  name String

  userId String
  user   User   @relation("UserOwnerAlbum", fields: [userId], references: [id])

  photos Photo[] @relation("PhotosInAlbum")

  createdAt DateTime @default(now())
  updateAt  DateTime @updatedAt

  @@index([userId])
}

model Music {
  id String @id @default(uuid())

  title      String
  author     String
  image_path String
  song_path  String @unique

  music_listId String?
  music_list MusicList? @relation("Musics", fields: [music_listId], references: [id])

  createdAt DateTime    @default(now())
  updateAt  DateTime    @updatedAt

  @@index([music_listId])
}

model MusicList {
  id      String @id @default(uuid())

  musics   Music[]  @relation("Musics")

  userId    String @unique
  user      User     @relation("UserAddMusic", fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updateAt  DateTime @updatedAt
}
